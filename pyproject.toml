[project]
name = "gpu-benchmark-suite"
version = "0.1.0"
description = "Comprehensive GPU benchmark suite for CUDA, Triton, and PyTorch performance analysis"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Arvin Singh", email = "arvinsingh@protonmail.com"}
]
license = {text = "MIT"}
keywords = ["gpu", "cuda", "triton", "pytorch", "benchmark", "performance"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: C++",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Scientific/Engineering",
    "Topic :: System :: Benchmark",
]
dependencies = [
    "numpy>=1.24",
    "pandas>=2.0",
    "torch>=2.8.0",
    "triton>=3.4.0",
    "typer[all]>=0.12",
    "rich>=13.0",
    "matplotlib>=3.5",
    "seaborn>=0.11",
    "tabulate>=0.9",
    "psutil>=5.9",
    "pynvml>=11.4",
    "cuda-python>=12.0",
    "pybind11>=2.10",
    "ninja>=1.11.1.4",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=23.0",
    "isort>=5.12",
    "flake8>=6.0",
    "mypy>=1.0",
    "pre-commit>=3.0",
]
docs = [
    "sphinx>=7.0",
    "sphinx-rtd-theme>=1.3",
    "myst-parser>=2.0",
]
profiling = [
    "nvitop>=1.3",
    "py-spy>=0.3",
    "line-profiler>=4.0",
]
cuda-extra = [
    "cupy>=12.0",  # Optional for additional CUDA utilities
]

[project.scripts]
gpu-bench = "gpu_benchmark.cli:main"

[project.urls]
"Homepage" = "https://github.com/arvinsingh/gpu-benchmark-suite"
"Bug Reports" = "https://github.com/arvinsingh/gpu-benchmark-suite/issues"
"Source" = "https://github.com/arvinsingh/gpu-benchmark-suite"

[build-system]
requires = [
    "setuptools>=61.0",
    "wheel",
    "pybind11>=2.10",
    "numpy>=1.24",
]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["gpu_benchmark"]
package-dir = {"" = "src"}

[tool.setuptools.package-data]
gpu_benchmark = ["kernels/*.cu", "kernels/*.cuh"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["gpu_benchmark"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=gpu_benchmark",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "cuda: marks tests as requiring CUDA",
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
